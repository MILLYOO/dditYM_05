<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.member.dao.MemberDAO"> 
<!-- 
모든 매핑파일은 해당 파일의 부모 클래스 (여기서는 selectMember를 하기 위해선 MemberDAO)를 넣어줘야한다.

리플렉션 기술을 이용하여, DAO의 메서드를 그대로 구현할 수 있다.
 -->
	<select id="selectMemberForAuth" parameterType="string" resultType="MemberVO">
		 SELECT MEM_ID, MEM_PASS, MEM_NAME, MEM_ROLE 
		 FROM MEMBER      
		 WHERE MEM_ID = #{memId} AND MEM_DELETE IS NULL
	</select>
	
	<sql id="searchFrag"> <!-- 코드조각을 만들기 위해 사용된다 flagment -->
		<where>
			<!-- if문이 만족되면 자동으로 where절이 만들어진다. -->
			<if test="searchVO neq null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.searchWord)"> <!-- OGNL -->
				<choose><!-- case when then -->
					<when test="searchVO.searchType eq 'name'">
						INSTR(MEM_NAME, #{searchVO.searchWord}) > 0
					</when>
					<when test="searchVO.searchType eq 'address'">
						MEM_ADD1 LIKE '%'||#{searchVO.searchWord}||'%'
					</when>
					<otherwise><!-- default -->
						INSTR(MEM_NAME, #{searchVO.searchWord}) > 0
						or
						MEM_ADD1 LIKE '%'||#{searchVO.searchWord}||'%'
					</otherwise>
				</choose>
			</if>
		</where>
	</sql>
	
	<select id = "selectTotalRecord" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER
		<include refid="searchFrag"/>
	</select>
	
	<select id="selectMemberList" resultType="MemberVO" parameterType="PagingVO">
	SELECT B.*
	FROM(
		SELECT A.*, ROWNUM RNUM
			FROM (
				SELECT MEM_ID,MEM_PASS,MEM_NAME,MEM_HP,MEM_MAIL,MEM_ADD1,MEM_MILEAGE
					, ROWID RID
				FROM MEMBER
				<include refid="searchFrag"/>		
				ORDER BY RID DESC
		) A
	)B
	<![CDATA[
		WHERE RNUM >= #{startRow} AND RNUM <= #{endRow}
	]]>
	</select>
	<resultMap type="MemberVO" id="memberMap" autoMapping="true">
		<id property="memId" column="MEM_ID"/>
		<collection property="prodList" javaType="java.util.List" ofType="ProdVO" autoMapping="true">
			<id property="prodId" column="PROD_ID"/>
<!-- 			<association property="buyer" javaType="BuyerVO" autoMapping="true"/> -->
		</collection>
	</resultMap>
	<select id="selectMember" parameterType="string" resultMap="memberMap">
		WITH MEMBERCART AS (
		SELECT                                                                       
		    MEM_ID,    MEM_PASS,    MEM_NAME,                                        
		    MEM_REGNO1,    MEM_REGNO2,    TO_CHAR(MEM_BIR, 'YYYY-MM-DD') MEM_BIR,    
		    MEM_ZIP,    MEM_ADD1,    MEM_ADD2,                                       
		    MEM_HOMETEL,    MEM_COMTEL,    MEM_HP,                                   
		    MEM_MAIL,    MEM_JOB,    MEM_LIKE,                                       
		    MEM_MEMORIAL,    TO_CHAR(MEM_MEMORIALDAY, 'YYYY-MM-DD') MEM_MEMORIALDAY, 
		    MEM_MILEAGE,    MEM_DELETE,		MEM_ROLE, MEM_IMG
		    , CART_PROD                                               
		FROM    MEMBER LEFT OUTER JOIN CART ON(MEM_ID = CART_MEMBER)                                                               
		WHERE MEM_ID = #{memId}
		), PRODALL AS (
			SELECT PROD_ID, PROD_NAME, PROD_COST, PROD_PRICE, PROD_MILEAGE
				, LPROD_NM
				, BUYER_NAME AS "buyer.buyerName", BUYER_ADD1 AS "buyer.buyerAdd1" <!-- 빈네비게이션을 이용하여 assication을 생략할 수 있다. -->
			  FROM PROD INNER JOIN LPROD ON (PROD_LGU = LPROD_GU) 
			  			INNER JOIN BUYER ON (PROD_BUYER = BUYER_ID)
		)
		SELECT *
		FROM MEMBERCART LEFT OUTER JOIN PRODALL ON (CART_PROD = PROD_ID)                                                             
	</select>
	
	<insert id="insertMember" parameterType="MemberVO">
	
	 INSERT INTO MEMBER (                                  
	    MEM_ID,    MEM_PASS,    MEM_NAME,                  
	    MEM_REGNO1,    MEM_REGNO2,    MEM_BIR,             
	    MEM_ZIP,    MEM_ADD1,    MEM_ADD2,                 
	    MEM_HOMETEL,    MEM_COMTEL,    MEM_HP,             
	    MEM_MAIL,    MEM_JOB,    MEM_LIKE,                 
	    MEM_MEMORIAL,    MEM_MEMORIALDAY,    MEM_MILEAGE,
	    MEM_ROLE
	    <if test="memImg neq null and memImg.length gt 0">
		    , MEM_IMG
		</if>
	 ) VALUES (                                            
		#{memId, jdbcType=VARCHAR},
		#{memPass, jdbcType=VARCHAR},
		#{memName, jdbcType=VARCHAR},
		#{memRegno1, jdbcType=VARCHAR},
		#{memRegno2, jdbcType=VARCHAR},
		TO_DATE(#{memBir, jdbcType=DATE}, 'YYYY-MM-DD'),
		#{memZip, jdbcType=VARCHAR},
		#{memAdd1, jdbcType=VARCHAR},
		#{memAdd2, jdbcType=VARCHAR},
		#{memHometel, jdbcType=VARCHAR},
		#{memComtel, jdbcType=VARCHAR},
		#{memHp, jdbcType=VARCHAR},
		#{memMail, jdbcType=VARCHAR},
		#{memJob, jdbcType=VARCHAR},
		#{memLike, jdbcType=VARCHAR},
		#{memMemorial, jdbcType=VARCHAR},
		TO_DATE(#{memMemorialday, jdbcType=DATE}, 'YYYY-MM-DD'),
		3000,
		'ROLE_USER'
			<if test="memImg neq null and memImg.length gt 0">
			,#{memImg, jdbcType=BLOB}
			</if>
	 )                                                     
	</insert>
	
	<update id="updateMember" parameterType="MemberVO">
	UPDATE MEMBER 
	SET
		MEM_NAME = #{memName,jdbcType=VARCHAR},
		MEM_BIR = #{memBir,jdbcType=DATE},
		MEM_ZIP = #{memZip,jdbcType=CHAR},
		MEM_ADD1 = #{memAdd1,jdbcType=VARCHAR},
		MEM_ADD2 = #{memAdd2,jdbcType=VARCHAR},
		MEM_HOMETEL = #{memHometel,jdbcType=VARCHAR},
		MEM_COMTEL = #{memComtel,jdbcType=VARCHAR},
		MEM_HP = #{memHp,jdbcType=VARCHAR},
		MEM_MAIL = #{memMail,jdbcType=VARCHAR},
		MEM_JOB = #{memJob,jdbcType=VARCHAR},
		MEM_LIKE = #{memLike,jdbcType=VARCHAR},
		MEM_MEMORIAL = #{memMemorial,jdbcType=VARCHAR},
		MEM_MEMORIALDAY = #{memMemorialday,jdbcType=DATE}
		<if test="memImg neq null and memImg.length gt 0">
		, MEM_IMG = #{memImg,jdbcType=BLOB}
		</if>
	WHERE MEM_ID = #{memId}	
	</update>
	
	<update id="deleteMember" parameterType="string">
	UPDATE MEMBER 
	SET
		MEM_DELETE = '1'
	WHERE MEM_ID = #{memId}	
	</update>
	
	<update id="realDeleteMember" statementType="CALLABLE" parameterType="map">
		{
			CALL PROC_DELETEMEMBER(#{rowcnt,mode=OUT,jdbcType=NUMERIC,javaType=int})
		}
	</update>
</mapper>