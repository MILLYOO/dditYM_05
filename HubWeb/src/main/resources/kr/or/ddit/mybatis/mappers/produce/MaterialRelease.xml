<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.produce.merterialrelease.dao.MaterialReleaseDAO">

	<sql id="orderByMR">
		ORDER BY MRE_NUM
	</sql>

	<sql id="searchFrag">
		<trim prefix="WHERE" prefixOverrides="AND">
			<if test="dateStart neq null">
	        	<if test="@org.apache.commons.lang3.StringUtils@isNotBlank(dateStart)">
	               <![CDATA[
	                MRE_DATE BETWEEN TO_DATE(#{dateStart}, 'YYYY/MM/DD') AND TO_DATE(#{dateEnd}, 'YYYY/MM/DD')+0.99999
	               ]]>
	            </if>
	            <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(buyerName)">
	            	<![CDATA[
	           	 AND INSTR(BUYER_NAME, #{buyerName}) > 0
	               ]]>
	            </if>
	            <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(deptName)">
	            	<![CDATA[
	                AND INSTR(DEPT_NAME, #{deptName}) > 0
	               ]]>
	            </if>
	            <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(empName)">
	            	<![CDATA[
	           	 AND INSTR(EMP_NAME, #{empName}) > 0
	               ]]>
	            </if>
			</if>      
		</trim>
	</sql>

	<!-- 자재출고처리서 목록 -->
	<select id="selectMaterialReleaseList" parameterType="HubSearchVO" resultType="MreleaseVO">
		SELECT MRE_NUM
		     , TO_CHAR(MRE_DATE,'YYYY') AS PDC_YY
             , TO_CHAR(MRE_DATE,'MM') AS PDC_MM
             , TO_CHAR(MRE_DATE,'DD') AS PDC_DD
		     , PROD_CODE
		     , ICODE_NAME
		     , PROD_NAME
		     , GCOMM_NAME
		     , BUYER_CODE
		     , BUYER_NAME
		     , DEPT_NAME
		     , EMP_NAME
		     , INST_NUM
		FROM MRELEASE
		<include refid="searchFrag" />
		<include refid="orderByMR" />
	</select>

	<!-- 자재출고처리서 조회 -->
	<select id="selectMaterialRelease" parameterType="MreleaseVO" resultType="MreleaseVO">
		SELECT MRE_NUM
             , TO_CHAR(MRE_DATE,'YYYY/MM/DD')
		     , PROD_CODE
		     , ICODE_NAME
		     , PROD_NAME
		     , GCOMM_NAME
		     , BUYER_CODE
		     , BUYER_NAME
		     , DEPT_NAME
		     , EMP_NAME
		FROM MRELEASE
	   WHERE MRE_NUM=#{mreNum,jdbcType=VARCHAR}
	</select>
	
	<!-- 자재출고처리서-원자재 목록 조회 -->
	<select id="selectMaterialReleaseRawsList" parameterType="MreleaseRawsVO" resultType="MreleaseRawsVO">
		SELECT MRE_NO
		     , MRE_NUM
		     , RAWS_CODE
		     , ICODE_NAME
		     , RAWS_NAME
		     , GCOMM_NAME
		     , UCOMM_NAME
		     , MR_QTY
		     , WAR_NAME
		     , PROJ_NAME
		     , INST_NUM
		FROM MRELEASE_RAWS
	   WHERE MRE_NUM=#{mreNum,jdbcType=VARCHAR}
	   ORDER BY MRE_NO
	</select>

	<!-- 자재출고처리서-원자재 조회 -->
	<select id="selectMaterialReleaseRaw" parameterType="MreleaseRawsVO" resultType="MreleaseRawsVO">
		SELECT MRE_NO
		     , MRE_NUM
		     , RAWS_CODE
		     , ICODE_NAME
		     , RAWS_NAME
		     , GCOMM_NAME
		     , UCOMM_NAME
		     , MR_QTY
		     , WAR_NAME
		     , PROJ_NAME
		     , INST_NUM
		FROM MRELEASE_RAWS
       WHERE MRE_NO=#{mreNo,jdbcType=NUMERIC}
	</select>
	
	<!-- 자재출고처리서 등록 -->
	<insert id="insertMaterialRelease" parameterType="MreleaseVO">
		<selectKey resultType="String" keyProperty="mreNum" order="BEFORE">
			SELECT 'ME'||TO_CHAR(SYSDATE,'YYMMDD')||LPAD(TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(MRE_NUM,9,10))),0) + 1),2,0)
			  FROM MRELEASE
			 WHERE SUBSTR(MRE_NUM,1,8)='ME'||TO_CHAR(SYSDATE,'YYMMDD')
 		</selectKey>
 		 INSERT INTO MRELEASE (
		     MRE_NUM
		   , MRE_DATE
		   , PROD_CODE
		   , ICODE_NAME
		   , PROD_NAME
		   , GCOMM_NAME
		   , BUYER_CODE
		   , BUYER_NAME
		   , DEPT_NAME
		   , EMP_NAME
		   , INST_NUM
		) VALUES (
			#{mreNum,jdbcType=VARCHAR}
	      , TO_DATE(#{mreDate,jdbcType=DATE},'YYYY/MM/DD')
	      , #{prodCode,jdbcType=VARCHAR}
	      , #{icodeName,jdbcType=VARCHAR}
	      , #{prodName,jdbcType=VARCHAR}
	      , #{gcommName,jdbcType=VARCHAR}
	      , #{buyerCode,jdbcType=NUMERIC}
	      , #{buyerName,jdbcType=VARCHAR}
	      , #{deptName,jdbcType=VARCHAR}
	      , #{empName,jdbcType=VARCHAR}
	      , #{instNum,jdbcType=VARCHAR}
		)
	</insert>
	
	<!-- 자재출고처리서 수정 -->
	<update id="updateMaterialRelease" parameterType="MreleaseVO">
		UPDATE MRELEASE
		   SET MRE_DATE=TO_DATE(#{mreDate,jdbcType=DATE},'YYYY/MM/DD')
		      , PROD_CODE=#{prodCode,jdbcType=VARCHAR}
		      , ICODE_NAME=#{icodeName,jdbcType=VARCHAR}
		      , PROD_NAME=#{prodName,jdbcType=VARCHAR}
		      , GCOMM_NAME=#{gcommName,jdbcType=VARCHAR}
		      , BUYER_CODE=#{buyerCode,jdbcType=NUMERIC}
		      , BUYER_NAME=#{buyerName,jdbcType=VARCHAR}
		      , DEPT_NAME=#{deptName,jdbcType=VARCHAR}
		      , EMP_NAME=#{empName,jdbcType=VARCHAR}
		WHERE MRE_NUM=#{mreNum,jdbcType=VARCHAR}
	</update>
	
	<!-- 자재출고처리서-원자재 등록 -->
	<insert id="insertMaterialReleaseRaws" parameterType="MreleaseRawsVO">
		<selectKey resultType="int" keyProperty="mreNo" order="BEFORE">
			SELECT NVL(MAX(MRE_NO),0) + 1
			  FROM MRELEASE_RAWS
		</selectKey>
		INSERT INTO MRELEASE_RAWS (
		      MRE_NO
		    , MRE_NUM
		    , RAWS_CODE
		    , ICODE_NAME
		    , RAWS_NAME
		    , GCOMM_NAME
		    , UCOMM_NAME
		    , MR_QTY
		    , WAR_NAME
		    , PROJ_NAME
		    , INST_NUM
		) VALUES (
			  #{mreNo,jdbcType=NUMERIC}
			, #{mreNum,jdbcType=VARCHAR}
			, #{rawsCode,jdbcType=VARCHAR}
			, #{icodeName,jdbcType=VARCHAR}
			, #{rawsName,jdbcType=VARCHAR}
			, #{gcommName,jdbcType=VARCHAR}
			, #{ucommName,jdbcType=VARCHAR}
			, #{mrQty,jdbcType=NUMERIC}
			, #{warName,jdbcType=VARCHAR}
			, #{projName,jdbcType=VARCHAR}
			, #{instNum,jdbcType=VARCHAR}
		)
	</insert>
	
	<!-- 자재출고처리서-원자재 수정 -->
	<update id="updateMaterialReleaseRaws" parameterType="MreleaseRawsVO">
		UPDATE MRELEASE_RAWS
		   SET RAWS_CODE=#{rawsCode,jdbcType=VARCHAR}
		    , ICODE_NAME=#{icodeName,jdbcType=VARCHAR}
		    , RAWS_NAME=#{rawsName,jdbcType=VARCHAR}
		    , GCOMM_NAME=#{gcommName,jdbcType=VARCHAR}
		    , UCOMM_NAME=#{ucommName,jdbcType=VARCHAR}
		    , MR_QTY=#{mrQty,jdbcType=NUMERIC}
		    , WAR_NAME=#{warName,jdbcType=VARCHAR}
		    , PROJ_NAME=#{projName,jdbcType=VARCHAR}
		WHERE MRE_NO=#{mreNo,jdbcType=NUMERIC}
	</update>
	
	
	<!-- 자재출고처리서 삭제 -->
	<delete id="deleteMaterialRelease" parameterType="MreleaseVO">
		DELETE FROM MRELEASE
		 WHERE MRE_NUM=#{mreNum,jdbcType=VARCHAR}
	</delete>
	
	<!-- 자재출고처리서-원자재 모두 삭제 -->
	<delete id="deleteAllMaterialReleaseRaws" parameterType="String">
		DELETE FROM MRELEASE_RAWS
		 WHERE MRE_NUM=#{mreNum,jdbcType=VARCHAR}
	</delete>
	
	<!-- 자재출고처리서-원자재  삭제 -->
	<delete id="deleteMaterialReleaseRaws" parameterType="MreleaseRawsVO">
		DELETE FROM MRELEASE_RAWS
		 WHERE MRE_NO=#{mreNo,jdbcType=NUMERIC}
	</delete>
	
	
	
	<!-- 자재출고처리 시 수량 감소 -->
	<update id="updateRawsQtyMinus" parameterType="MreleaseRawsVO">
		UPDATE RAWS
		   SET RAWS_QTY=RAWS_QTY-#{mrQty,jdbcType=NUMERIC}
		 WHERE RAWS_CODE=#{rawsCode,jdbcType=VARCHAR}
	</update>
	
	
	<!-- 자재출고처리 시 창고 수량 감소 -->
	<update id="updateWarQtyMinus" parameterType="WarRawVO">
		UPDATE WAR_RAW
		   SET WR_QTY=WR_QTY-#{mrQty,jdbcType=NUMERIC}
		 WHERE RAW_CODE=#{rawCode,jdbcType=VARCHAR}
		   AND WAR_CODE=(SELECT WAR_CODE
		 				   FROM WAREHOUSE
		 				  WHERE WAR_NAME=#{warName,jdbcType=VARCHAR})
	</update>
	
	<!-- 자재출고처리 삭제 시 수량 증가 -->
	<update id="updateRawsQtyPlus" parameterType="MreleaseRawsVO">
		UPDATE RAWS
		   SET RAWS_QTY=RAWS_QTY+#{mrQty,jdbcType=NUMERIC}
		 WHERE RAWS_CODE=#{rawsCode,jdbcType=VARCHAR}
	</update>
	
	<!-- 자재출고처리 삭제 시 창고 수량 증가 -->
	<update id="updateWarQtyPlus" parameterType="WarRawVO">
		UPDATE WAR_RAW
		   SET WR_QTY=WR_QTY+#{mrQty,jdbcType=NUMERIC}
		 WHERE RAW_CODE=#{rawCode,jdbcType=VARCHAR}
		   AND WAR_CODE=(SELECT WAR_CODE
		 				   FROM WAREHOUSE
		 				  WHERE WAR_NAME=#{warName,jdbcType=VARCHAR})
	</update>
	
		
	<!-- 품목계정 얻기	 -->
	<select id="selectIcodeNameByPI" parameterType="String" resultType="String">
		SELECT ICODE_NAME
		  FROM PRODUCT
		 WHERE PROD_CODE=#{prodCode,jdbcType=VARCHAR}
	</select>
	
	<!-- 품목계정 얻기	 -->
	<select id="selectIcodeNameByRw" parameterType="String" resultType="String">
		SELECT ICODE_NAME
		  FROM RAWS
		 WHERE RAWS_CODE=#{rawsCode,jdbcType=VARCHAR}
	</select>
	
	
	
	
	<!-- 지시서 적용 시 지시서 적용 여부 변경-->
	<update id="updateInstApplyYn" parameterType="InstrucprodVO">
		UPDATE INSTRUCPROD
		   SET MR_APPYN=#{mrAppyn,jdbcType=VARCHAR}
		 WHERE INST_NUM=#{instNum,jdbcType=VARCHAR}
	</update>
	
	<!-- 지시서 목록-->
	<select id="selectInstApplyList" parameterType="HubSearchVO" resultType="InstrucprodVO">
    	SELECT INST_NUM
  			   , TO_CHAR(INST_DATE,'YYYY') AS PDC_YY
               , TO_CHAR(INST_DATE,'MM') AS PDC_MM
               , TO_CHAR(INST_DATE,'DD') AS PDC_DD
               , TO_CHAR(INST_DATE,'YYYY/MM/DD') AS INST_DATE
			   , PROD_CODE
			   , ICODE_NAME
			   , PROD_NAME
			   , GCOMM_NAME
			   , TO_CHAR(INST_COMPLETE,'YYYY/MM/DD') AS INST_COMPLETE
			   , INST_LEADQTY
			   , DEPT_NAME
			   , EMP_NAME
			   , KCOMM_NAME
			   , INST_FINISH
		 	   , ORB_NUM
		 FROM INSTRUCPROD
	    WHERE MR_APPYN='N'
        <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(dateStart)">
           <![CDATA[
            AND INST_DATE BETWEEN TO_DATE(#{dateStart}, 'YYYY/MM/DD') AND TO_DATE(#{dateEnd}, 'YYYY/MM/DD')+0.99999
           ]]>
        </if>
        <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(rawsCode)">
        	<![CDATA[
            AND INSTR(PROD_CODE, #{rawsCode}) > 0
           ]]>
        </if>
        <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(instNum)">
        	<![CDATA[
            AND INSTR(INST_NUM, #{instNum}) > 0
           ]]>
        </if>
	</select>
	
	<!-- 지시서 적용된 자재출고처리 목록 -->
	<select id="selectPiAppMrList" parameterType="MreleaseVO" resultType="MreleaseVO">
	   SELECT MRE_NUM
		     , MRE_DATE
		     , PROD_CODE
		     , ICODE_NAME
		     , PROD_NAME
		     , GCOMM_NAME
		     , BUYER_CODE
		     , BUYER_NAME
		     , DEPT_NAME
		     , EMP_NAME
		     , INST_NUM
		FROM MRELEASE
	   WHERE INST_NUM=#{instNum,jdbcType=VARCHAR}
	</select>
	
	
	
	<!-- BOM전개 -->
	<insert id="insertMreleaseRawsByBom" parameterType="BomRawsVO">
		<selectKey resultType="int" keyProperty="mreNo" order="BEFORE">
			SELECT NVL(MAX(MRE_NO),0) + 1
			  FROM MRELEASE_RAWS
		</selectKey>
		
		INSERT ALL
		<foreach collection="bomRawsList" item="bomR" index="idx">
		INTO MRELEASE_RAWS(
		      MRE_NO
		    , MRE_NUM
		    , RAWS_CODE
		    , ICODE_NAME
		    , RAWS_NAME
		    , GCOMM_NAME
		    , MR_QTY
		    , WAR_NAME
		) VALUES (
			  #{mreNo}+#{idx}
			, #{mreNum,jdbcType=VARCHAR}
			, #{bomR.rawsCode,jdbcType=VARCHAR}
			, #{bomR.icodeName,jdbcType=VARCHAR}
			, #{bomR.rawsName,jdbcType=VARCHAR}
			, #{bomR.gcommName,jdbcType=VARCHAR}
			, ROUND(NVL(#{bomR.brawRequireqty}/DECODE(#{bomR.brawLossrate}, 0, NULL,#{bomR.brawLossrate}), 0))+#{bomR.brawRequireqty}
			, #{bomR.warName,jdbcType=VARCHAR}
		)
		</foreach>
		SELECT * FROM DUAL
	</insert>	
	
	<select id="selectWarName" parameterType="String" resultType="String">
		SELECT A.WAR_NAME AS WAR_NAME
		  FROM WAREHOUSE A, WAR_RAW B
		 WHERE A.WAR_CODE=B.WAR_CODE
		   AND B.RAW_CODE=#{rawCode,jdbcType=VARCHAR}
	</select>
	
<!-- 	새로운 문서 체크 쿼리 -->
	<insert id="insertCheck" parameterType="MreleaseVO">
		INSERT INTO DOC_CHECK
		VALUES(#{mreNum},'N',SYSDATE)
	</insert>
	
	
	
</mapper>