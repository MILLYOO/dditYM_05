<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.produce.productioninstruction.dao.ProductionInstructionDAO">
	
	<sql id="orderByPI">
		ORDER BY INST_NUM
	</sql>
	
	<sql id="orderByOB">
		ORDER BY ORB_NUM
	</sql>
	
	<sql id="searchFragPI">
       <trim prefix="WHERE" prefixOverrides="AND">
          <if test="dateStart neq null or piStartDate neq null">
             <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(dateStart)">
                <![CDATA[
                 INST_DATE BETWEEN TO_DATE(#{dateStart}, 'YYYY/MM/DD') AND TO_DATE(#{dateEnd}, 'YYYY/MM/DD')+0.99999
                ]]>
             </if>
             <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(empName)">
             	<![CDATA[
            	 AND INSTR(EMP_NAME, #{empName}) > 0
                ]]>
             </if>
             <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(deptName)">
             	<![CDATA[
                 AND INSTR(DEPT_NAME, #{deptName}) > 0
                ]]>
             </if>
             <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(instFinish)">
             	<![CDATA[
                 AND INSTR(INST_FINISH, #{instFinish}) > 0
                ]]>
             </if>
             <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(rawsCode)">
             	<![CDATA[
                 AND INSTR(PROD_CODE, #{rawsCode}) > 0
                ]]>
             </if>
             <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(instNum)">
             	<![CDATA[
                 AND INSTR(INST_NUM, #{instNum}) > 0
                ]]>
             </if>
          </if>      
       </trim>
   </sql>
	<sql id="searchFragST">
	    <if test="rawsCode neq null or rawsName neq null">
	       <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(rawsCode)">
	          <![CDATA[
	      	 	AND INSTR(A.RAWS_CODE, #{rawsCode}) > 0
	          ]]>
	       </if>
	       <if test="@org.apache.commons.lang3.ObjectUtils@isNotEmpty(rawsName)">
	       	<![CDATA[
	      	 	AND INSTR(A.RAWS_NAME, #{rawsName}) > 0
	          ]]>
	       </if>
	    </if>      
	</sql>
	
	<sql id="searchFragOB">
       <trim prefix="WHERE" prefixOverrides="AND">
          <if test="obStartDate neq null">
             <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(obStartDate)">
                <![CDATA[
                 ORB_DATE BETWEEN TO_DATE(#{obStartDate}, 'YYYY/MM/DD') AND TO_DATE(#{obEndDate}, 'YYYY/MM/DD')+0.99999
                ]]>
             </if>
             <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(buyerName)">
             	<![CDATA[
            	 AND INSTR(BUYER_NAME, #{buyerName}) > 0
                ]]>
             </if>
             <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(orbNum)">
             	<![CDATA[
                 AND INSTR(ORB_NUM, #{orbNum}) > 0
                ]]>
             </if>
          </if>      
       </trim>
   </sql>

	<!-- 생산지시서 목록 -->
	<select id="selectProductionInstructionList" parameterType="HubSearchVO" resultType="InstrucprodVO">
		SELECT INST_NUM
  			   , TO_CHAR(INST_DATE,'YYYY') AS PDC_YY
               , TO_CHAR(INST_DATE,'MM') AS PDC_MM
               , TO_CHAR(INST_DATE,'DD') AS PDC_DD
               , TO_CHAR(INST_DATE,'YYYY/MM/DD') AS INST_DATE
			   , PROD_CODE
			   , ICODE_NAME
			   , PROD_NAME
			   , GCOMM_NAME
			   , TO_CHAR(INST_COMPLETE,'YYYY/MM/DD') AS INST_COMPLETE
			   , INST_LEADQTY
			   , DEPT_NAME
			   , EMP_NAME
			   , KCOMM_NAME
			   , INST_FINISH
		 	   , ORB_NUM
		FROM INSTRUCPROD
		<include refid="searchFragPI" />
		<include refid="orderByPI" />
	</select>

	<!-- 생산지시서-원자재 목록 -->	
	<select id="selectInstRawsList" parameterType="InstrucprodVO" resultType="InstRawsVO">
		SELECT INST_NO
		      , INST_NUM
		      , RAWS_CODE
		      , ICODE_NAME
		      , RAWS_NAME
		      , GCOMM_NAME
		      , UCOMM_NAME
		      , PR_QTY
		FROM INST_RAWS
	   WHERE INST_NUM=#{instNum,jdbcType=VARCHAR}
	   ORDER BY INST_NO
	</select>
	
	<!-- 생산지시서 1건 조회 -->
	<select id="selectProductionInstruction" parameterType="InstrucprodVO" resultType="InstrucprodVO">
		SELECT INST_NUM
			   , INST_DATE
			   , PROD_CODE
			   , ICODE_NAME
			   , PROD_NAME
			   , GCOMM_NAME
			   , INST_COMPLETE
			   , INST_LEADQTY
			   , DEPT_NAME
			   , EMP_NAME
			   , KCOMM_NAME
			   , INST_FINISH
		  	   , ORB_NUM
		FROM INSTRUCPROD
	   WHERE INST_NUM=#{instNum,jdbcType=VARCHAR}
	</select>

	<!-- 생산지시서 등록 -->	
	<insert id="insertProductionInstruction" parameterType="InstrucprodVO">
		<selectKey resultType="String" keyProperty="instNum" order="BEFORE">
			SELECT 'ID'||TO_CHAR(SYSDATE,'YYMMDD')||LPAD(TO_CHAR(NVL(MAX(TO_NUMBER(SUBSTR(INST_NUM,9,10))),0) + 1),2,0)
			  FROM INSTRUCPROD
			 WHERE SUBSTR(INST_NUM,1,8)='ID'||TO_CHAR(SYSDATE,'YYMMDD')
		</selectKey>
		INSERT INTO INSTRUCPROD (
		      INST_NUM
		    , INST_DATE
		    , PROD_CODE
		    , ICODE_NAME
		    , PROD_NAME
		    , GCOMM_NAME
		    , INST_COMPLETE
		    , INST_LEADQTY
		    , DEPT_NAME
		    , EMP_NAME
		    , KCOMM_NAME
		    , INST_FINISH
		    , ORB_NUM
		    , MR_APPYN
			, PW_APPYN
		) VALUES (
			  #{instNum,jdbcType=VARCHAR}
			, TO_DATE(#{instDate,jdbcType=DATE},'YYYY/MM/DD')
			, #{prodCode,jdbcType=VARCHAR}
			, #{icodeName,jdbcType=VARCHAR}
			, #{prodName,jdbcType=VARCHAR}
			, #{gcommName,jdbcType=VARCHAR}
			, TO_DATE(#{instComplete,jdbcType=DATE},'YYYY/MM/DD')
			, #{instLeadqty,jdbcType=NUMERIC}
			, #{deptName,jdbcType=VARCHAR}
			, #{empName,jdbcType=VARCHAR}
			, #{kcommName,jdbcType=VARCHAR}
			, #{instFinish,jdbcType=VARCHAR}
			, #{orbNum,jdbcType=VARCHAR}
			, 'N'
			, 'N'
		)
	</insert>
	
	<!-- 생산지시서-원자재 등록 -->
	<insert id="insertProductionRaws" parameterType="InstRawsVO">
		<selectKey resultType="int" keyProperty="instNo" order="BEFORE">
			SELECT NVL(MAX(INST_NO),0) + 1
			  FROM INST_RAWS
		</selectKey>
		INSERT INTO INST_RAWS (
		      INST_NO
		    , INST_NUM
		    , RAWS_CODE
		    , ICODE_NAME
		    , RAWS_NAME
		    , GCOMM_NAME
		    , UCOMM_NAME
		    , PR_QTY
		) VALUES (
			  #{instNo,jdbcType=NUMERIC}
			, #{instNum,jdbcType=VARCHAR}
			, #{rawsCode,jdbcType=VARCHAR}
			, #{icodeName,jdbcType=VARCHAR}
			, #{rawsName,jdbcType=VARCHAR}
			, #{gcommName,jdbcType=VARCHAR}
			, #{ucommName,jdbcType=VARCHAR}
			, #{prQty,jdbcType=NUMERIC}
		)
	</insert>
	
	<!-- 생산지시서-원자재 1건 조회 -->
	<select id="selectProductionRaws" parameterType="InstRawsVO" resultType="InstRawsVO">
		SELECT INST_NO
			  , INST_NUM
		      , RAWS_CODE
		      , ICODE_NAME
		      , RAWS_NAME
		      , GCOMM_NAME
		      , UCOMM_NAME
		      , PR_QTY
		 FROM INST_RAWS
		WHERE INST_NO=#{instNo,jdbcType=NUMERIC}
	</select>
	
	<!-- 생산지시서 수정 -->
	<update id="updateProductionInstruction" parameterType="InstrucprodVO">
		UPDATE INSTRUCPROD
	   	   SET INST_DATE=#{instDate,jdbcType=DATE}
			   , PROD_CODE=#{prodCode,jdbcType=VARCHAR}
			   , ICODE_NAME=#{icodeName,jdbcType=VARCHAR}
			   , PROD_NAME=#{prodName,jdbcType=VARCHAR}
			   , GCOMM_NAME=#{gcommName,jdbcType=VARCHAR}
			   , INST_COMPLETE=#{instComplete,jdbcType=DATE}
			   , INST_LEADQTY=#{instLeadqty,jdbcType=NUMERIC}
			   , DEPT_NAME=#{deptName,jdbcType=VARCHAR}
			   , EMP_NAME=#{empName,jdbcType=VARCHAR}
			   , KCOMM_NAME=#{kcommName,jdbcType=VARCHAR}
			   , INST_FINISH=#{instFinish,jdbcType=VARCHAR}
	     WHERE INST_NUM=#{instNum,jdbcType=VARCHAR}
	</update>
	
	<!-- 생산지시서-원자재 수정 -->
	<update id="updateProductRaws" parameterType="InstRawsVO">
		UPDATE INST_RAWS
		   SET RAWS_CODE=#{rawsCode,jdbcType=VARCHAR}
			   , ICODE_NAME=#{icodeName,jdbcType=VARCHAR}
			   , RAWS_NAME=#{rawsName,jdbcType=VARCHAR}
			   , GCOMM_NAME=#{gcommName,jdbcType=VARCHAR}
			   , UCOMM_NAME=#{ucommName,jdbcType=VARCHAR}
			   , PR_QTY=#{prQty,jdbcType=NUMERIC}
		 WHERE INST_NUM=#{instNum,jdbcType=VARCHAR}
		   AND INST_NO=#{instNo,jdbcType=NUMERIC}
	</update>
	
	<!-- 생산지시서 삭제 -->
	<delete id="deleteProductionInstruction" parameterType="InstrucprodVO">
		DELETE FROM INSTRUCPROD
		 WHERE INST_NUM=#{instNum,jdbcType=VARCHAR}
	</delete>
	
	<!-- 생산지시서-원자재 1건 삭제 -->
	<delete id="deleteProducRaws" parameterType="InstRawsVO">
		DELETE FROM INST_RAWS
		 WHERE INST_NO=#{instNo,jdbcType=NUMERIC}
	</delete>

	<!-- 생산지시서별 원자재 삭제 -->
	<delete id="deleteAllProdRaws" parameterType="String">
		DELETE FROM INST_RAWS
		 WHERE INST_NUM=#{instNum,jdbcType=VARCHAR}
	</delete>
	
	<!-- 지시수량에 맞춰 투입예정수량변경 -->
	<update id="updatePrQtyByLeadQty" parameterType="InstRawsVO">
		UPDATE INST_RAWS
		   SET PR_QTY=#{prQty,jdbcType=NUMERIC}
		 WHERE INST_NUM=#{instNum,jdbcType=VARCHAR}
	</update>
	
	<!-- 수주서적용된 지시서 찾기 -->
	<select id="selectObApplyPi" parameterType="InstrucprodVO" resultType="InstrucprodVO">
		SELECT INST_NUM
			   , INST_DATE
			   , PROD_CODE
			   , ICODE_NAME
			   , PROD_NAME
			   , GCOMM_NAME
			   , INST_COMPLETE
			   , INST_LEADQTY
			   , DEPT_NAME
			   , EMP_NAME
			   , KCOMM_NAME
			   , INST_FINISH
		  	   , ORB_NUM
		  FROM INSTRUCPROD
		 WHERE ORB_NUM=#{orbNum,jdbcType=VARCHAR}
	</select>
	
	<!-- 수주서 목록 조회 -->
	<select id="selectOrderBookListForPI" parameterType="HubSearchVO" resultType="OrderBookVO">
		SELECT ORB_NUM
			  , TO_CHAR(ORB_DATE,'YYYY/MM/DD') AS ORB_DATE
			  , BUYER_CODE
			  , BUYER_NAME
			  , DEPT_NAME
			  , EMP_NAME
			  , ORB_VAT
			  , ORB_RESULT
			  , ORB_FINISH
			  , ORB_APPYN
		  FROM ORDERBOOK
	     WHERE ORB_APPYN='N'
       <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(obStartDate)">
          <![CDATA[
           AND ORB_DATE BETWEEN TO_DATE(#{obStartDate}, 'YYYY/MM/DD') AND TO_DATE(#{obEndDate}, 'YYYY/MM/DD')+0.99999
          ]]>
       </if>
       <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(buyerName)">
		<![CDATA[
		   AND INSTR(BUYER_NAME, #{buyerName}) > 0
		  ]]>
		</if>
       <if test="@org.apache.commons.lang3.StringUtils@isNotBlank(orbNum)">
       	<![CDATA[
           AND INSTR(ORB_NUM, #{orbNum}) > 0
          ]]>
       </if>
	    <include refid="orderByOB" />
	</select>
	
	<!-- 수주서-제품 목록 조회 -->
	<select id="selectOrderBookProdListforPI" parameterType="OrderBookVO" resultType="OrderBookProdVO">
		SELECT ORB_NO
		     , ORB_NUM
		     , PROD_CODE
		     , ICODE_NAME
		     , PROD_NAME
		     , GCOMM_NAME
		     , UCOMM_NAME
		     , TO_CHAR(OP_DATE,'YYYY/MM/DD') AS OP_DATE
		     , OP_QTY
		     , OP_UPRICE
		     , OP_SP
		     , OP_VAT
		     , OP_SUMCOST
		     , EST_CODE
		FROM ORDER_PROD
	   WHERE ORB_NUM=#{orbNum,jdbcType=VARCHAR}
	</select>
	
	<!-- 수주서 존재 여부 확인 위한 조회 -->
	<select id="selectOrderBookforPI" parameterType="OrderBookVO" resultType="OrderBookVO">
		SELECT ORB_NUM
			  , ORB_DATE
			  , BUYER_CODE
			  , BUYER_NAME
			  , DEPT_NAME
			  , EMP_NAME
			  , ORB_VAT
			  , ORB_RESULT
			  , ORB_FINISH
		FROM ORDERBOOK
	   WHERE ORB_NUM=#{orbNum,jdbcType=VARCHAR}		
	</select>
	
	<!-- 수주서-제품 존재 여부 확인 위한 조회 -->
	<select id="selectOrderBookProdforPI" parameterType="OrderBookProdVO" resultType="OrderBookProdVO">
		SELECT ORB_NO
		     , ORB_NUM
		     , PROD_CODE
		     , ICODE_NAME
		     , PROD_NAME
		     , GCOMM_NAME
		     , UCOMM_NAME
		     , OP_DATE
		     , OP_QTY
		     , OP_UPRICE
		     , OP_SP
		     , OP_VAT
		     , OP_SUMCOST
		     , EST_CODE
		FROM ORDER_PROD
	   WHERE ORB_NUM=#{orbNum,jdbcType=VARCHAR}
	     AND ORB_NO=#{orbNo,jdbcType=NUMERIC}
	</select>
	
	<!-- 수주서 적용 시 수주서 적용 여부 변경 -->
	<update id="updateOderBookApplyYn" parameterType="OrderBookVO">
		UPDATE ORDERBOOK
		   SET ORB_APPYN=#{orbAppyn,jdbcType=VARCHAR}
		 WHERE ORB_NUM=#{orbNum,jdbcType=VARCHAR}
	</update>
	
	
	<!-- BOM전개를 위한 BOM_RAW 목록 조회 -->
	<select id="selectBomRawByProd" parameterType="String" resultType="BomRawsVO">
		SELECT BOM_NO
		      , BOM_CODE
		      , RAWS_CODE
		      , RAWS_NAME
		      , ICODE_NAME
		      , GCOMM_NAME
		      , BRAW_NETQTY
		      , BRAW_REQUIREQTY
		      , BRAW_LOSSRATE
		      , BRAW_LEVEL
		      , BRAW_REGNUM
		      , RAW_ADQINV
		  FROM BOM_RAWS
		 WHERE BOM_CODE=(SELECT BOM_CODE
		                   FROM BOM
				                  WHERE PROD_CODE=#{prodCode,jdbcType=VARCHAR})
	</select>
	<select id="selectBomRawByRaws" parameterType="String" resultType="BomRawsVO">
		SELECT BOM_NO
		      , BOM_CODE
		      , RAWS_CODE
		      , RAWS_NAME
		      , ICODE_NAME
		      , GCOMM_NAME
		      , BRAW_NETQTY
		      , BRAW_REQUIREQTY
		      , BRAW_LOSSRATE
		      , BRAW_LEVEL
		      , BRAW_REGNUM
		      , RAW_ADQINV
		  FROM BOM_RAWS
		 WHERE BOM_CODE=(SELECT BOM_CODE
		                   FROM BOM
				                  WHERE RAWS_CODE=#{prodCode,jdbcType=VARCHAR})
	</select>
	
	<!-- BOM 전개 적용하여 INST_RAWS 등록 -->
	<insert id="insertInstRawsByBomApply" parameterType="BomRawsVO">
		<selectKey resultType="int" keyProperty="instNo" order="BEFORE">
			SELECT NVL(MAX(INST_NO),0) + 1
			  FROM INST_RAWS
		</selectKey>
	
		INSERT ALL
	
		<foreach collection="bomRawsList" item="bomR" index="idx">
				INTO INST_RAWS (
					    INST_NO,
					    INST_NUM,
					    RAWS_CODE,
					    ICODE_NAME,
					    RAWS_NAME,
					    GCOMM_NAME,
					    PR_QTY
					) VALUES (
					    #{instNo}+#{idx}
					  , #{instNum,jdbcType=VARCHAR}
					  , #{bomR.rawsCode,jdbcType=VARCHAR}
					  , #{bomR.icodeName,jdbcType=VARCHAR}
					  , #{bomR.rawsName,jdbcType=VARCHAR} 
					  , #{bomR.gcommName,jdbcType=VARCHAR}
					  , ROUND(NVL(#{bomR.brawRequireqty}/DECODE(#{bomR.brawLossrate}, 0, NULL,#{bomR.brawLossrate}), 0))+#{bomR.brawRequireqty}
					)
		</foreach>
		
		SELECT * FROM DUAL
	
	</insert>
	
	<!-- 현재고 -->
	<select id="selectStockStatus" parameterType="HubSearchVO" resultType="ItemVO">
		SELECT A.RAWS_CODE AS RAWS_CODE
			 , A.ICODE_NAME AS ICODE_NAME
			 , A.RAWS_NAME AS RAWS_NAME
			 , A.GCOMM_NAME AS GCOMM_NAME
			 , A.RAWS_QTY AS RAWS_QTY
			 , B.WAR_CODE AS WAR_CODE
			 , B.WR_QTY AS WR_QTY
			 , C.WAR_NAME AS WAR_NAME
		  FROM ITEM A, WAR_ITEM B, WAREHOUSE C
		 WHERE A.RAWS_CODE = B.RAW_CODE
		   AND B.WAR_CODE = C.WAR_CODE
		 <include refid="searchFragST" />
	</select>
	
	<!-- 	새로운 문서 체크 쿼리 -->
	<insert id="insertCheck" parameterType="InstrucprodVO">
		INSERT INTO DOC_CHECK
		VALUES(#{instNum},'N',SYSDATE)
	</insert>
	
	<select id="selectIcodeName" parameterType="String" resultType="String">
		SELECT ICODE_NAME
		  FROM ITEM
		 WHERE RAWS_CODE=#{prodCode,jdbcType=VARCHAR}
	</select>
	
</mapper>